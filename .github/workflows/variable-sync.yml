name: Sync GitHub Org Secrets and Variables

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      delete_missing:
        type: boolean
        description: "Delete secrets and variables not in config.yaml?"
        required: false
        default: false

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Load configuration
        id: load_config
        run: |
          echo "Loading config.yaml..."
          CONFIG_FILE="config.yaml"
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "‚ùå config.yaml not found"
            exit 1
          fi

      - name: Sync Variables
        env:
          GITHUB_TOKEN: ${{ secrets.ORG_PAT }}
          ORG: GamiHealth
          DELETE_MISSING: ${{ github.event.inputs.delete_missing }}
        run: |
          echo "üîÑ Syncing Variables..."
          # Get current variables
          CURRENT_VARS=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/orgs/ORG/actions/variables | \
            jq -r '.variables // [] | .[].name')
          
          echo "Current VARS already present in Organization: $CURRENT_VARS"

          # Create/Update variables
          for VAR in $(yq e '.variables | keys | .[]' config.yaml); do
            VALUE=$(yq e ".variables[\"$VAR\"]" config.yaml)
            echo "Trying to create/update VAR: $VAR with VALUE: $VALUE"

            # Check if variable exists
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/orgs/$ORG/actions/variables/$VAR)

            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "‚úèÔ∏è Updating variable: $VAR"
              curl -s -X PATCH \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/orgs/$ORG/actions/variables/$VAR \
                -d '{"name":"$VAR","value":"$VALUE","visibility":"all"}'
            elif [ "$HTTP_STATUS" -eq 404 ]; then
              echo "üÜï Creating variable: $VAR"
              curl -s -X POST \
                -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                https://api.github.com/orgs/$ORG/actions/variables \
                -d '{"name":"$VAR","value":"$VALUE","visibility":"all"}'
            else
              echo "‚ùå Error checking variable $VAR (HTTP $HTTP_STATUS)"
            fi
          done

      # - name: Sync Secrets
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.ORG_PAT }}
      #     ORG: GamiHealth
      #     DELETE_MISSING: ${{ github.event.inputs.delete_missing }}
      #   run: |
      #     echo "üîÑ Syncing Secrets..."
      #     # Get public key for encryption
      #     PUBKEY_JSON=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
      #       https://api.github.com/orgs/$ORG/actions/secrets/public-key)
      #     PUBKEY=$(echo "$PUBKEY_JSON" | jq -r '.key')
      #     KEY_ID=$(echo "$PUBKEY_JSON" | jq -r '.key_id')

      #     # Get current secrets
      #     CURRENT_SECRETS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
      #       https://api.github.com/orgs/$ORG/actions/secrets | \
      #       jq -r '.secrets // [] | .[].name')


      #     # Create/Update secrets
      #     for SECRET in $(yq e '.secrets | keys | .[]' config.yaml); do
      #       VALUE=$(yq e ".secrets[\"$SECRET\"]" config.yaml)
      #       ENCRYPTED=$(echo -n "$VALUE" | \
      #         openssl pkeyutl -encrypt -pubin -inkey <(echo "$PUBKEY" | base64 -d) -pkeyopt rsa_padding_mode:pkcs1 | base64 -w0)
      #       echo "üü¢ Creating/Updating secret: $SECRET"
      #       curl -s -X PUT \
      #         -H "Authorization: token $GITHUB_TOKEN" \
      #         -H "Accept: application/vnd.github+json" \
      #         https://api.github.com/orgs/$ORG/actions/secrets/$SECRET \
      #         -d "{\"encrypted_value\":\"$ENCRYPTED\", \"key_id\":\"$KEY_ID\"}"
      #     done
